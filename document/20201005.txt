jsp 기본객체

jsp 파일에서 스크립틀릿(<% %> - 자바로직 작성이 가능한 부분)에서 별도로 선언하지 않아도 사용할 수 있는 객체(8개)

jsp              		servlet					설명
request					doXXX(첫번째 인자) 			요청과 관련정보(parameter, attribute)
response				doXXX(두번째 인자)			응답과 관련된 정보
session					request객체를 통해 얻는다	클라이언트별로 관리되는 세션 정보	
						request.getSession()
application				servlet클래스의 			웹 어플리케이션에 대한 전반적인 정보		
						getServletContext()
	

							
scope
	page 		< 	 request 		< 		session 		< 		application
	jsp페이지			클라이언트의 요청을 		클라이언트 별로				서버에 하나만 존재하는 영역
	내에서만유효	 	처리하는동안만 유효		서버에 저장공간 설정				(java-static)
										서버에 설정된 time-out내에
										요청이안오면 자동 소멸
										
부수적인 jsp 기본객체
jsp				|			servlet
out				|	servlet클래스의 getPrintWriter();

==> jsp 파일에서 화면에 출력을 할때 표현식을 사용하게 되는데
	보통 자바 로직과 혼합되서 사용하는 경우가 많다.
	(ex.리스트 객체에 담긴 여러개의 문자열을 루프를 돌면서 화면에 출력)
	<% for(String name :names){ %>
		<%=name%>
	<%}%>
	==>스크립틀릿과 표현식을 혼용해서 사용하다 보니 코드가 복잡해짐
		==> out객체를 사용하게 되면 표현식 없이도 스크립틀릿에서만 작성하는 것이 가능
	<% for(String name : names){
		out.wite(name);
		}
	%>

	=>실제 개발을 할 때는 스크립틀릿과 표현식을 사용허ㅏ지 않고
	  가독성이 좋은 jstl, EL(Expression Language)를 사용한다.
		
	application: 서버에 단 하나만 존재하는 영역
				 서버 정보를 얻어올 수 있다.(톰캣, servlet버전 등)
				 
[개발 일반사항]
servlet => service => jsp 작성
service 코드 작성시 발생한 문제가 servlet, jsp를 만들고나서야 확인이 됨.
작성한 코드가 잘 돌아가는지 그때그때 확인을 하자
==> test코드(코드가 잘 돌아가는지 확인해주는 코드)
	==> 테스트를 자동화 할 수 있다. -> 코드를 수정하고 다시 반복적으로 테스트하기가 쉬워진다.

dao => service => servlet
dao <= service <= servlet

scope 테스트 시나리오
1. http://localhost/scopeServlet으로 get요청
2. ScopeServlet.doGet 메소드에서 요청 처리
	-request. session, application scope 에 각각 값을 저장
	-응답을 scopeView.jsp에서 처리하도록 위임 (forward)
3. scopeView.jsp에서 request, session, application 각 영역에 저장된 속성값을 화면에 표시
4. 브라우저를 달리하여 scopeView.jsp를 요청 - 값이 어떻게 달라지는지 확인 


	